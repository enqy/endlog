#!/usr/bin/env python3
from enum import Enum
from functools import reduce
import sys

class IOState(Enum):
    Input = 0,
    Output = 1

    def is_input(self):
        return self == IOState.Input

    def is_output(self):
        return self == IOState.Output


class Module:
    io: dict[str, tuple[int, IOState]]

    def __init__(self):
        self.io = {}

    def add_io(self, name: str, width: int, state: IOState):
        self.io[name] = (width, state)


class Transformer:
    source: str

    in_passthrough: bool
    in_block_comment: bool

    in_module: bool
    current_module_name: str | None
    seen_braces_module: int
    in_module_def: bool

    in_match: bool
    seen_braces_match: int

    in_on: bool
    seen_braces_on: int

    consts: dict[str, str]
    modules: dict[str, Module]

    def __init__(self, source):
        self.source = source

        self.in_passthrough = False
        self.in_block_comment = False

        self.in_module = False
        self.current_module_name = None
        self.seen_braces_module = 0
        self.in_module_def = False

        self.in_match = False
        self.seen_braces_match = 0

        self.in_on = False
        self.seen_braces_on = 0

        self.consts = {}
        self.modules = {}

    def transform(self, line: str) -> str:
        stripped_line = line.strip()
        if stripped_line == "%-%":
            self.in_passthrough = not self.in_passthrough
            return ""

        if stripped_line.startswith("/*"):
            self.in_block_comment = True

        if not any(stripped_line.startswith(x) for x in ("//")) and not self.in_passthrough and not self.in_block_comment:
            line = reduce(lambda line, func: func(line, stripped_line), [
                self.transform_semicolon,
                self.transform_match,
                self.transform_par,
                self.transform_module,
                self.transform_module_def,
                self.transform_bits,
                self.transform_block,
                self.transform_concat,
                self.transform_assignments,
                self.transform_bitwidth,
                self.transform_on,
                self.transform_macros,
                self.transform_const,
            ], line)

        if stripped_line.endswith("*/"):
            self.in_block_comment = False

        return line

    def transform_semicolon(self, line: str, stripped_line: str) -> str:
        if ";" not in line and stripped_line != "" and not self.in_module_def:
            if not any(stripped_line.startswith(x) for x in ("`", "%", ".")):
                if not any(stripped_line.endswith(x) for x in ("{", "}", ",", "(")):
                    line = line.rstrip() + ";\n"

        return line

    def transform_match(self, line: str, stripped_line: str) -> str:
        if stripped_line.startswith("match"):
            self.in_match = True
            line = line.replace("match", "case")

        return line

    def transform_par(self, line: str, stripped_line: str) -> str:
        if stripped_line.startswith("par"):
            line = line.replace("par", "parameter")

        return line

    def transform_module(self, line: str, stripped_line: str) -> str:
        if stripped_line.startswith("module"):
            self.in_module = True

            module_name = stripped_line.split(" ")[1]
            self.modules[module_name] = Module()
            self.current_module_name = module_name

            if "(" in line:
                 self.in_module_def = True

        if self.in_module_def and ")" in line:
            self.in_module_def = False

        return line

    def transform_module_def(self, line: str, stripped_line: str) -> str:
        if self.in_module and self.in_module_def and not stripped_line.startswith("module"):
            if not stripped_line.startswith("input") and not stripped_line.startswith("output"):
                bitwidth_start = line.find("#")
                if bitwidth_start == -1:
                    raise Exception("No bitwidth found in module definition")
                bitwidth_end = bitwidth_start + 1
                while line[bitwidth_end] in "0123456789":
                    bitwidth_end += 1
                bitwidth = int(line[bitwidth_start + 1:bitwidth_end])

                name = stripped_line.split(" ")[1].strip(" \n,")

                state = self.lookahead_detect_io_state(name)
                state_str = "output" if state.is_output() else "input"

                whitespace = self.extract_whitespace(line)
                line = whitespace + f"{state_str} wire [{bitwidth - 1}:0]" + line[bitwidth_end:]

                assert(self.current_module_name is not None)
                self.modules[self.current_module_name].add_io(name, bitwidth, state)

        return line

    def transform_bits(self, line: str, _: str) -> str:
        if "'" in line:
            indices = [i for i, x in enumerate(line) if x == "'"]
            offset = 0
            for start in indices:
                start = start + offset
                end = start + 1
                while line[end] in "01":
                    end += 1
                bits = line[start + 1:end]
                line = line[:start] + str(len(bits)) + "'b" + line[start + 1:]
                offset += len(str(len(bits))) + 1

        return line

    def transform_block(self, line: str, stripped_line: str) -> str:
        line = self.transform_block_start(line, stripped_line)
        line = self.transform_block_end(line, stripped_line)

        return line

    def transform_block_start(self, line: str, _: str) -> str:
        if "{" in line:
            def replace_normal_block(line: str) -> str:
                char_index = line.index("{")
                replace = "begin"
                if line[char_index - 1] not in " \n":
                    replace = " " + replace
                if line[char_index + 1] not in " \n":
                    replace += " "
                return line.replace("{", replace)

            special_replace = False
            if self.in_match:
                if self.seen_braces_match == 0:
                    line = line.replace("{", "")
                    special_replace = True
                self.seen_braces_match += 1
            if self.in_on:
                if self.seen_braces_on == 0:
                    line = line.replace("{", "begin")
                    special_replace = True
                self.seen_braces_on += 1
            if self.in_module:
                if self.seen_braces_module == 0:
                    line = line[:-3] + ";\n"
                    special_replace = True
                self.seen_braces_module += 1

            if not special_replace:
                line = replace_normal_block(line)

        return line

    def transform_block_end(self, line: str, _: str) -> str:
        if "}" in line:
            def replace_normal_block(line: str) -> str:
                char_index = line.index("}")
                replace = "end"
                if line[char_index - 1] not in " \n":
                    replace = " " + replace
                if line[char_index + 1] not in " \n":
                    replace += " "
                return line.replace("}", replace)

            special_replace = False
            if self.in_match:
                self.seen_braces_match -= 1
                if self.seen_braces_match == 0:
                    self.in_match = False
                    line = line.replace("}", "endcase")
                    special_replace = True
            if self.in_on:
                self.seen_braces_on -= 1
                if self.seen_braces_on == 0:
                    self.in_on = False
                    line = line.replace("}", "end")
                    special_replace = True
            if self.in_module:
                self.seen_braces_module -= 1
                if self.seen_braces_module == 0:
                    self.in_module = False
                    line = line.replace("}", "endmodule")
                    special_replace = True

            if not special_replace:
                line = replace_normal_block(line)

        return line

    def transform_concat(self, line: str, _: str) -> str:
        if all(x in line for x in ["<|", "|>"]):
            line = line.replace("<|", "{")
            line = line.replace("|>", "}")

        return line

    def transform_assignments(self, line: str, stripped_line: str) -> str:
        line = self.transform_nonblocking_assignment(line, stripped_line)
        line = self.transform_blocking_assignment(line, stripped_line)
        line = self.transform_continuous_assignment(line, stripped_line)
        line = self.transform_output_assignments(line, stripped_line)

        return line

    def transform_nonblocking_assignment(self, line: str, _: str) -> str:
        if " <= " in line:
            line = line.replace(" <= ", " <= ")

        return line

    def transform_blocking_assignment(self, line: str, _: str) -> str:
        if " = " in line:
            line = line.replace(" = ", " = ")

        return line

    def transform_continuous_assignment(self, line: str, _: str) -> str:
        if " := " in line:
            index = line.index(" := ")
            whitespace = self.extract_whitespace(line)
            line = whitespace + "assign " + line[len(whitespace):index] + " = " + line[index + 4:]

        return line

    def transform_output_assignments(self, line: str, _: str) -> str:
        if " ::= " in line:
            index = line.index(" ::= ")
            whitespace = self.extract_whitespace(line)
            line = whitespace + "assign " + line[len(whitespace):index] + " = " + line[index + 5:]

        return line

    def transform_bitwidth(self, line: str, _: str) -> str:
        if "#" in line:
            index = line.index("#")
            if line[index + 1] in "0123456789":
                end = index + 1
                while line[end] in "0123456789":
                    end += 1
                width = int(line[index + 1:end])
                line = line[:index] + f" [{width - 1}:0]" + line[end:]
            elif line[index + 1] == " ":
                line = line[:index] + line[index + 1:]

        return line

    def transform_on(self, line: str, stripped_line: str) -> str:
        if stripped_line.startswith("on "):
            index = line.index("on ")
            split = line.strip().split(" ")
            args_str = " ".join(split[1:-1]).strip("()")
            args = [arg.strip() for arg in args_str.split(",") if arg.strip() != ""]
            og_line = line

            if len(args) == 1 and args[0].isnumeric():
                line = line[:index] + f"always #{args[0]} " + og_line[index + len(args[0]) + 6:]
            else:
                line = line[:index] + "always @ ("
                for i, arg in enumerate(args):
                    signal, edge = arg.split("@")

                    if i != 0:
                        line += " or "

                    if edge in ("posedge", "negedge"):
                        line += edge + " " + signal
                    else:
                        line += signal
                line += ") " + og_line[og_line.index(")") + 2:]

            if stripped_line.endswith("{"):
                self.in_on = True

        return line

    def transform_macros(self, line: str, stripped_line: str) -> str:
        if stripped_line.startswith("%!"):
            start = line.index("%!")
            end = start + 2
            while line[end] not in "( ":
                end += 1
            macro = line[start + 2:end]
            args = [arg.strip() for arg in line[end:].strip("();\n").split(",")]

            if macro == "sleep":
                line = line[:line.index("%!")] + f"#{args[0]}\n"

        return line

    def transform_const(self, line: str, stripped_line: str) -> str:
        if "%%" in line:
            if stripped_line.startswith("%%") and " = " in stripped_line:
                split = stripped_line.split(" = ")
                self.consts[split[0][2:].strip()] = split[1].strip()
                line = ""
            else:
                start = line.index("%%")
                end = start + 2
                while line[end].isalpha():
                    end += 1
                line = line[:start] + self.consts[line[start + 2:end]] + line[end:]

        return line

    def extract_whitespace(self, line: str) -> str:
        whitespace = ""
        for char in line:
            if char in " ":
                whitespace += char
            else:
                break
        return whitespace

    def lookahead_detect_io_state(self, io_name: str) -> IOState:
        indices = [i for i in range(len(self.source)) if self.source.startswith(f" {io_name} ::=", i) or self.source.startswith(f"\n{io_name} ::=", i)]
        limit = len(self.source) if len([i for i in range(len(self.source)) if self.source.startswith("module",  i)]) <= 1 else self.source.index("module")
        for index in indices:
            if index < limit:
                return IOState.Output
        return IOState.Input


def main():
    with open(sys.argv[1]) as fi:
        fi_lines = fi.readlines()
        fi.seek(0)
        source = fi.read()

    transformer = Transformer(source)

    with open(sys.argv[2], 'w') as fo:
        line_index = 0
        while line_index < len(fi_lines):
            line = fi_lines[line_index]
            line = transformer.transform(line)

            fo.write(line)
            line_index += 1


if __name__ == "__main__":
    main()
